#!/bin/bash

################################################################################
#                                                                              #
# Author: Patrick Ditzel (patrick@central-computer.de)                         #
# Lizenz:  GNU GENERAL PUBLIC LICENSE v3                                       #
#                                                                              #
################################################################################

################################################################################
# Set up the backupenvironment and "global" functions
################################################################################

function set_config {
	if [ -r /etc/dbb.cfg ]; then
		# Check if configuration is found in /etc if yes set configvar
		BACKUPCFG=/etc/dbb.cfg
	elif [ -r ~/.dbb.cfg ]; then
		# If config is found in the backupuser home directory set it into the configvar
		BACKUPCFG=~/.dbb.cfg
	else
		echo "No configuration file is found, please create one" | /usr/bin/logger -s -i -t databasebackup
	fi
}

function check_backup_env {
	# Check if the configuration exists and is not empty
	if [ -r $BACKUPCFG ] && [ -s $BACKUPCFG ]; then
		# If true then load it
		. $BACKUPCFG
	else
		# If not throw an errormessage
		echo "The configfile does not exists or is empty" | /usr/bin/logger -s -i -t databasebackup
		echo "Please create the $BACKUPCFG or write your settings into" | /usr/bin/logger -s -i -t databasebackup
		exit 1
	fi
	if [ "$ENABLE_DEBUG" = "TRUE" ]; then
		# If debugoutput is enabled show the configurationfile without comments
		echo "################################################################################" | /usr/bin/logger -s -i -t databasebackup
		while read -r configline; do
			echo "$configline" | grep -v '^$' | grep -v '^#' | /usr/bin/logger -s -i -t databasebackup
		done <<< "$(cat $BACKUPCFG)"
		echo "################################################################################" | /usr/bin/logger -s -i -t databasebackup
	fi
	# Check if the target directory for the backupfiles exists
	if [ ! -d $BACKUP_DIR ]; then
		# If not create it
		mkdir -p $BACKUP_DIR
	fi
	# Check if the directory for tempfiles exists
	if [ ! -d $TMP_DIR ]; then
		# If not create it
		mkdir -p $TMP_DIR
	fi
	# Check the dependencys
	if [ ! -e /usr/bin/sudo ]; then
		echo "It seems that you dont have sudo installed. Please install sudo and restart" | /usr/bin/logger -s -i -t databasebackup
		exit 1
	fi
	if [ ! -e /usr/bin/psql ]; then
		echo "It seems that you dont have psql installed. You may have problems to backup remote databases" | /usr/bin/logger -s -i -t databasebackup
	fi
	numberRegex='^[0-9]+$'
	if ! [[ $(id -u postgres 2>&1) =~ $numberRegex ]] ; then
		echo "It seems that you dont have the user postgres on your computer. You may have problems to backup local postgres databases" | /usr/bin/logger -s -i -t databasebackup
	fi
}

function set_logger {
	# Check if log to syslog is enabled
	if [ "$ENABLE_SYSLOG" = "TRUE" ]; then
		# If true then define the logger
		LOGGER="/usr/bin/logger -s -i -t databasebackup"
	else
		# If not cat it out on stdout
		LOGGER="/bin/cat"
	fi
}

function debug {
        DEBUGMSG=$1
        if [ "$ENABLE_DEBUG" = "TRUE" ]; then
                echo $DEBUGMSG | $LOGGER
        fi
}

function is_interactive {
	SCRPT=$(basename $0)
	debug $SCRPT

	if [ "$SCRPT" = "dbbi" ]; then
		# If the script is called for interactive use we have to chenge the calls of the functions
		# Setting the $LOGGER fÃ¼r interactive use to /bin/cat
		LOGGER="/bin/cat"
		# Here we set teh environment variable for interactive use
		debug "dbbi (DataBase Interactive Backup) is called"
		RADIOACTIVE=TRUE
	elif [ "$SCRPT" = "dbb" ]; then
		# Set the $LOGGER
		LOGGER="/usr/bin/logger -s -i -t databasebackup"
		# If the script is used noninteractive we have also to set the environmet variable with this information
		debug "dbb (DataBase Backup) is called"
		RADIOACTIVE=FALSE
		# unset the $LOGGER because this will be set later within the informatione in the configfile
		unset LOGGER
	else
		# If the switch between interactive and noninteractive does not work: tell it but before set the $LOGGER
		LOGGER="/usr/bin/logger -s -i -t databasebackup"
		debug "An error occured - don't know if to use interactive or noninteractive"
		exit 1
	fi
}

function backup_file_handler {
	# translate the vars to make it more readable
	TMP_DIR=$1
	BACKUP_DIR=$2
	FILE=$3
	# If enabled put out some debug infos
	debug "TMP_DIR: $TMP_DIR"
	debug "BACKUP_DIR: $BACKUP_DIR"
	debug "FILE: $FILE"
	# Check if the script should keep a filehistorie
	if [ "$KEEP_BACKUP_FILES" = "TRUE" ]; then
		debug "Keep history"
		# Set some vars to manage the files
		BACKUP_DAY=$(date +%x)
		REMOVE_NUMBER=$(( $BACKUP_FILES_DAYS + 1 ))
		FILE_PREFIX_NAME_TO_REMOVE=$(date -d "$REMOVE_NUMBER days ago" "+%x")
		# ... and if it is turned on give some debig info
		debug "BACKUP_DAY: $BACKUP_DAY"
		debug "REMOVE_NUMBER: $REMOVE_NUMBER"
		debug "FILE_PREFIX_NAME_TO_REMOVE: $FILE_PREFIX_NAME_TO_REMOVE-$FILE"
		# Check there is an backupfile from the current day
		if [ -f $BACKUP_DIR/$BACKUP_DAY-$FILE ]; then
			# If yes append miniutes and seconds to the date-profix of the filename
			debug "File $BACKUP_DIR/$BACKUP_DAY-$FILE already exists. Rename the new one."
			DATE_TIME_SUFFIX=$(date +%H%M%S)
			# ... and move it into the targetdir
			mv $TMP_DIR/$FILE $BACKUP_DIR/$BACKUP_DAY-$DATE_TIME_SUFFIX-$FILE
		else
			# If there is no backupfile of the current day move it to the backupfolder
			mv $TMP_DIR/$FILE $BACKUP_DIR/$BACKUP_DAY-$FILE
		fi
		# Check if there are files oder then the days to keep set in the config
		if [ -f $BACKUP_DIR/$FILE_PREFIX_NAME_TO_REMOVE-$FILE ]; then
			# if yes remove it
			rm $BACKUP_DIR/$FILE_PREFIX_NAME_TO_REMOVE-$FILE
			# Also remove the files with the extended prefix in the name
			# If there is ab file with the extende prefix then there has to be a file with tne normal prefix
			rm $BACKUP_DIR/$FILE_PREFIX_NAME_TO_REMOVE?????-$FILE
		else
			# If no file exists do nothing but some debuginfo
			debug "File $BACKUP_DIR/$FILE_PREFIX_NAME_TO_REMOVE-$FILE does not exists, so can not remove it."
		fi
	else
		# If we do not keep a filehistory do thw following
		# Check if the targefile exists
		if [ -f $BACKUP_DIR/$FILE ]; then
			debug "$FILE exists ... make a diff"
			# Check if there are differences betwenn last backup and the actual one
			diff $TMP_DIR/$FILE $BACKUP_DIR/$FILE > /dev/null 2>&1
			if [ $? -ne 0 ]; then
				# If yes then move it to the backupfolder
				debug "Differences found between old and new $FILE -> moving to BACKUP_DIR"
				mv $TMP_DIR/$FILE $BACKUP_DIR/$FILE
			else
				# If not do nothing
				debug "No differences found between old an new $FILE"
			fi
		else
			# If there is a new databasedumpfile move it to the backupfolder
			debug "New Backupfile $FILE -> moving to $BACKUP_DIR"
			mv $TMP_DIR/$FILE $BACKUP_DIR/$FILE
		fi
	fi
}

################################################################################
# PostgreSQL
################################################################################

# PostgreSQL local

function pg_local_all {
	# Debugoutput id DEBUG is enabled
	debug "Dump all from Postgres local"
	# Dump all databases in one file as user postgres (Debian)
	sudo -H -i -u postgres pg_dumpall > $TMP_DIR/local_dumpall.pgsql
	debug "Diff alldumps from Postgres local" 
	# Check if there are differences between the actual dump and the last dump
	backup_file_handler $TMP_DIR $BACKUP_DIR local_dumpall.pgsql
}

function pg_local_single {
	# Get a list with all databases on localhost. Do it as user postgres (Debian)
	# parallelize the following
	for DB in $(sudo -H -i -u postgres /usr/bin/psql -At -c "SELECT datname FROM pg_database WHERE NOT datistemplate AND datallowconn ORDER BY datname;" postgres)
		do
			debug "Dumping local database $DB"
			# Dump each database in a single file
			sudo -H -i -u postgres /usr/bin/pg_dump -Fp $DB > $TMP_DIR/local_$DB.pgsql
			backup_file_handler $TMP_DIR $BACKUP_DIR local_$DB.pgsql
			echo ""
		done
}

# Do the local backupjobs

function run_local_pg_backups {
	# Test if the current backupuser has access via sudo to postgres
	# This part has to be improved!
	sudo -l -U $BACKUPUSER | grep postgres
	if [ $? -eq 0 ];then
		# If the user has access vi sudo to postgres and a full dump is configured, do it.
		if [ "$POSTGRES_BACKUP_LOCAL_DUMP_ALL" == "TRUE" ]; then
			pg_local_all
		fi
		# If the user has access vi sudo to postgres and dumps for each database is configured , do it.
		if [ "$POSTGRES_BACKUP_LOCAL_SINGLE" == "TRUE" ]; then
			pg_local_single
		fi
	else
		# If the user is not permitted to acces the postgresdatabases vi sudo throw an errormessage
		echo "" | $LOGGER
		echo "The backupuser does not the permission to act as user postgres" | $LOGGER
		echo "Please add the following line to your /etc/sudoers:" | $LOGGER
		echo "backupuser ALL=(postgres) NOPASSWD: /usr/bin/psql,/usr/bin/pg_dump" | $LOGGER
		echo "" | $LOGGER
	fi
}

################################################################################

# Postgres remote
#
# All databases on remotehosts defined in the ~/.pgpass file will be backuped.
# So the ~/.pgpass is the configurationfile for this part!

function dump_remote_pgdb {
	# Translate params ;-)
	TRGTHOST=$1
	TRGTPORT=$2
	TRGTDB=$3
	TRGTBDUSER=$4
	# If debug is enabled, check the translated params
	debug "PostgreSQL:"
	debug "    Host: $TRGTHOST"
	debug "    Port: $TRGTPORT"
	debug "    Database: $TRGTDB"
	debug "    User: $TRGTBDUSER"
	debug "Testing TLS-Connection"
	# Check if the connection to the postgres-server are encryptet (here we force with sslmode=require)
	psql -U $TRGTBDUSER postgresql://$TRGTHOST:$TRGTPORT/$TRGTDB?sslmode=require -c '\conninfo' | grep TLS > /dev/null 2>&1
	if [ "$?" -eq "0" ]; then
		debug "Dumping remote database $TRGTHOST-$TRGTDB"
		# If we successfuly testet the encrypted connection to the postgres-server we try to force the sslmode
		# I don't know if the following statement really effect to pg_dump :-(
		export PGSSLMODE=require
		# Dump the databases which are defined in the params
		/usr/bin/pg_dump -U $TRGTBDUSER -h $TRGTHOST -p $TRGTPORT $TRGTDB > $TMP_DIR/$TRGTHOST-$TRGTDB.pgql
		backup_file_handler $TMP_DIR $BACKUP_DIR $TRGTHOST-$TRGTDB.pgql
	else
		# If no encrypted connection to the postgres-server can be established throw an errormessage
		echo "" | $LOGGER
		echo "Could not establish a TLS encrypted connection the the databasehost." | $LOGGER
		echo "Please configure the connections with hostssl in pg_hba.conf." | $LOGGER
		echo "" | $LOGGER
	fi
	echo ""
}

function run_remote_pg_backups {
	# Check if the remoebackup for postgres is configured
	if [ "$POSTGRES_BACKUP_REMOTE" = "TRUE" ]; then
		# If yes the check for the ~/.pgpass-file. Here are the remotedatabases specified
		if [ -r ~/.pgpass ]; then
			# parallelize the following
			while read -r LINE; do 
				# For each entry do the backup
				debug "run dump with params $LINE"
				dump_remote_pgdb $LINE
			# To get the params for the function the .pgpass-file is striped from the comments,
			# the ":" are replaces against whitespaces and only the first four coloums are used
			# so we give "host port database user" to the function
			done <<< "$(cat ~/.pgpass | grep -v '#' | tr ":" " " | cut -d " " -f1,2,3,4)"
		else
			# If the ~/.pgpass-file is missig, throw an errormessage
			echo "" | $LOGGER
			echo "The ~/.pgpass file is missing, no remote postgres databases will be backuped." | $LOGGER
			echo "If you want do backup postgres reomte databases, please create a ~/.pgpass file in the homedirectory of your backupuser (https://wiki.postgresql.org/wiki/Pgpass)." | $LOGGER
			echo "" | $LOGGER
		fi
	fi
	echo ""
}

#
#
# The folowing function are not ready yet or are not implemented yes
#
#

################################################################################
# MariaBD/MySQL
################################################################################

# ToDo!!!

# MariaBD/MySQL remote
#
# The Information what MySQL/MariaDB - databases should be backuped are defined in ~/.my.cnf

function run_mysql_backups {
	debug "Dump remote database $MYSQLDB from $MYSQLDBHOST"
	/usr/bin/mysqldump --skip-dump-date -h $MYSQLDBHOST -u $MYSQLDBUSER -p$MYSQLPASSWD $MYSQLDB > $TMP_DIR/$MYSQLDBHOST_$MYSQLDB.mysql
	debug "Diff MySQLDump $MYSQLDB"
	diff $TMP_DIR/$MYSQLDBHOST_$MYSQLDB.mysql $BACKUP_DIR/$MYSQLDBHOST_$MYSQLDB.mysql > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		debug "Differences found -> moving to BACKUP_DIR"
	        mv $TMP_DIR/$MYSQLDBHOST_$MYSQLDB.mysql $BACKUP_DIR/$MYSQLDBHOST_$MYSQLDB.mysql
	else
	        debug "No differences found an Database $MYSQLDB"
	fi
	echo ""
}


################################################################################
# MongoDB
################################################################################

# ToDo!!!

#MongoDB

#...


function run_mongodb_backup {
	echo ""
}

################################################################################

# The mainfunktion
function main {
	is_interactive
	if [ "$RADIOACTIVE" = "TRUE" ]; then
		debug "Unsing dbbi (dbb interactive = dbbi) is for future use"
	fi
	if [ "$RADIOACTIVE" = "FALSE" ]; then
		debug "running noninteractive"
		# Set up the configuration for the noninteractive mode
		set_config
		# Configure logging (from configurationfil)e
		set_logger
		# Check if the backupenvironment is setup properly
		check_backup_env
		# Check which backuptask is activated und run it
		if [ "$POSTGRES_BACKUP_LOCAL" = "TRUE" ]; then
			run_local_pg_backups
		fi
		if [ "$POSTGRES_BACKUP_REMOTE" = "TRUE" ]; then
			run_remote_pg_backups
		fi
		if [ "$MYSQL_BACKUP_REMOTE" = "TRUE" ]; then
			run_remote_mysql_backups
		fi
		if [ "$MYSQL_BACKUP_LOCAL" = "TRUE" ]; then
			run_local_mysql_backup
		fi
		if [ "$MONGODB_BACKUP_LOCAL" = "TRUE" ]; then
			run_local_mongodb_backup
		fi
		if [ "$MONGODB_BACKUP_REMOTE" = "TRUE" ]; then
			run_remote_mongodb_backup
		fi
			# The final action: remove the dumps
		rm -rf $TMP_DIR
	fi

}

main
